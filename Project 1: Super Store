-- For this project, I set up a SQL database to create information about items sold at a store and relevant prices.
This project provides fictional "Super Store" data to test queries and show understanding of them as well.

-- Link to db-fiddle to check any queries or further details/information.
-- https://www.db-fiddle.com/

-- All the Data used to Query provided below.

CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);

------------------------------------------------------------------------

-- If you would like to double check the queries provided here, please use the link to db-fiddle provided above to confirm.  

--Examples of SQL Queries:

-- #1: Use a SELECT statement to order the items by price.
SELECT item_name, category, price
From superstore
WHERE price>19
ORDER BY price DESC;

-- #2: Show a statistic about the item prices.
SELECT item_name, category, price
From superstore
WHERE price>19
ORDER BY price DESC;

-- #3: Use an aggregation function about the price for items in the category of "Kitchen Supplies".

SELECT *, COUNT('Kitchen Supplies')
From superstore
ORDER BY item_name;

-- #4: Use an aggregation function to show which category or item has the highest stock quantity?

SELECT item_name, category, stock_quantity
FROM superstore
WHERE stock_quantity = (SELECT MAX(stock_quantity) 
FROM superstore);
